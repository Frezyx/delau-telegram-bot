package main

import (
	"bytes"
	"encoding/json"
	"log"
	"net/http"
	"strconv"

	"github.com/BurntSushi/toml"
	tgbot "github.com/go-telegram-bot-api/telegram-bot-api"
)

var numericKeyboard = tgbot.NewReplyKeyboard(
	tgbot.NewKeyboardButtonRow(
		tgbot.NewKeyboardButton("/info"),
	),
	tgbot.NewKeyboardButtonRow(
		tgbot.NewKeyboardButton("/login"),
	),
)

func main() {
	config := NewConfig()
	_, err := toml.DecodeFile(configPath, config)
	if err != nil {
		log.Fatal(err)
	}
	botToken := config.BotToken
	authURL := config.AuthURL
	checkEmailURL := config.CheckEmailURL
	checkTGAuthURL := config.CheckTGAuthURL
	bot, err := tgbot.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	var regRequests map[int64]AuthRequest
	regRequests = make(map[int64]AuthRequest)

	bot.Debug = true

	u := tgbot.NewUpdate(0)
	u.Timeout = 60

	updates, err := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}
		msg := tgbot.NewMessage(update.Message.Chat.ID, "–Ø –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å")

		switch update.Message.Text {
		case "/start":
			msg = tgbot.NewMessage(update.Message.Chat.ID, "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç Delau üòÉ\n –ß—Ç–æ–± –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö /login")
			msg.ReplyMarkup = numericKeyboard
		case "/login":
			chatIDStr := strconv.FormatInt(update.Message.Chat.ID, 10)
			data, _ := http.Get(checkTGAuthURL + chatIDStr)
			if data.StatusCode == 200 {
				msg = tgbot.NewMessage(update.Message.Chat.ID, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
			} else {
				regRequests[update.Message.Chat.ID] = AuthRequest{
					Email:    update.Message.Text,
					Password: "",
					ChatID:   update.Message.Chat.ID,
				}
				msg = tgbot.NewMessage(update.Message.Chat.ID, "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è delau –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∏–ª–∏ –ª–æ–≥–∏–Ω —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
			}
		case "/info":
			msg = tgbot.NewMessage(update.Message.Chat.ID, "–ú—ã —á–∞—Å—Ç–æ –ø—Ä–æ–≤–æ–¥–∏–º –≤—Ä–µ–º—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –∏ –º–µ—Å—Å–µ–Ω–¥–µ—Ä–∞—Ö –∏ –∑–∞–±—ã–≤–∞–µ–º –ø—Ä–æ –ª–∏—á–Ω—ã–µ –¥–µ–ª–∞ –∏ –∑–∞–¥–∞—á–∏ Delau - –ø—Ä–æ–µ–∫—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–± –≤—ã —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö –∏ –¥–µ–ª–∞—Ö –≤ –≤–∞—à–µ–π –ª—é–±–∏–º–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –∏–ª–∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ")
		default:
			if thisReq, ok := regRequests[update.Message.Chat.ID]; ok {
				thisReq.Password = update.Message.Text
				regRequests[update.Message.Chat.ID] = thisReq
				if thisReq.Password != "" && thisReq.Email != "" {
					crossMsg := tgbot.NewMessage(update.Message.Chat.ID, "–í—ã –≤–≤–µ–ª–∏ –≤–∞—à –ø–∞—Ä–æ–ª—å. \n –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à –ø–∞—Ä–æ–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
					bot.Send(crossMsg)
					buf, err := json.Marshal(regRequests[update.Message.Chat.ID])
					if err != nil {
						msg = tgbot.NewMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
					}
					data, err := http.Post(authURL, "application/json", bytes.NewBuffer(buf))
					if data.StatusCode == 200 {
						msg = tgbot.NewMessage(update.Message.Chat.ID, "–û—Ç–ª–∏—á–Ω–æ ! –í—ã –ø—Ä–æ—à–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. \n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Dealu")
						regRequests[update.Message.Chat.ID] = AuthRequest{}
					} else {
						msg = tgbot.NewMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
					}
				} else {
				}
			} else {
				if update.Message.Text != "" {
					data, _ := http.Get(checkEmailURL + update.Message.Text)
					if data.StatusCode == 200 {
						msg = tgbot.NewMessage(update.Message.Chat.ID, "–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤–∞—à e-mail. \n –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å.")
						regRequests[update.Message.Chat.ID] = AuthRequest{
							Email:    update.Message.Text,
							Password: "",
							ChatID:   update.Message.Chat.ID,
						}
					} else {
						msg = tgbot.NewMessage(update.Message.Chat.ID, "–¢–∞–∫–æ–≥–æ email –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
					}
				}
			}
			log.Println(regRequests)
		}
		bot.Send(msg)
	}
}
