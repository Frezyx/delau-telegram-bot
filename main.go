package main

import (
	"fmt"
	"log"
	"net/http"
	"strconv"

	"github.com/BurntSushi/toml"
	tgbot "github.com/go-telegram-bot-api/telegram-bot-api"
)

func main() {
	config := NewConfig()
	_, err := toml.DecodeFile(configPath, config)
	if err != nil {
		log.Fatal(err)
	}
	botToken := config.BotToken
	authURL := config.AuthURL
	bot, err := tgbot.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	var regRequests map[int64]AuthRequest
	regRequests = make(map[int64]AuthRequest)

	var isUserStartAuth map[int64]bool
	isUserStartAuth = make(map[int64]bool)

	bot.Debug = true

	u := tgbot.NewUpdate(0)
	u.Timeout = 60

	updates, err := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}
		msg := tgbot.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞")

		switch update.Message.Text {
		case "/start":
			msg = getStartMessage(update)
		case "/login":
			chatIDStr := strconv.FormatInt(update.Message.Chat.ID, 10)
			data, _ := http.Get(config.CheckTGAuthURL + chatIDStr)
			if data.StatusCode == 200 {
				msg = tgbot.NewMessage(
					update.Message.Chat.ID,
					"‚ö†Ô∏è –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.\n"+
						"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ ‚û°Ô∏è /logout")
				if _, ok := isUserStartAuth[update.Message.Chat.ID]; ok {
					isUserStartAuth[update.Message.Chat.ID] = false
				}
			} else {
				if _, ok := isUserStartAuth[update.Message.Chat.ID]; ok {
					isUserStartAuth[update.Message.Chat.ID] = true
				} else {
					isUserStartAuth[update.Message.Chat.ID] = true
				}
				msg = getEmailListenerMessage(update, bot)
			}
		case "/logout":
			data, _ := http.Get(
				config.LogoutTGURL + strconv.FormatInt(update.Message.Chat.ID, 10))
			if data.StatusCode == 200 {
				msg = tgbot.NewMessage(
					update.Message.Chat.ID,
					"‚úÖ –í—ã –æ—Ç–≤—è–∑–∞–ª–∏ —á–∞—Ç –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n"+
						"–ë–æ–ª—å—à–µ –≤—ã –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞.")
			} else {
				msg = tgbot.NewMessage(
					update.Message.Chat.ID,
					"‚ùå –í–∞—à —á–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–∏ –∫ –æ—Ç–¥–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É")
			}
		case "/info":
			msg = getInfoMessage(update)
		case "/help":
			msg = getHelpMessage(update)
		default:
			if _, ok := isUserStartAuth[update.Message.Chat.ID]; ok {
				if isUserStartAuth[update.Message.Chat.ID] {
					msg = listenAuth(update, regRequests, bot, authURL, config.CheckEmailURL)
				}
			} else {
				msg = tgbot.NewMessage(update.Message.Chat.ID, "üòø –Ø –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å\n"+"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—Ç–æ-—Ç–æ –æ—Ç—Å—é–¥–∞ ‚û°Ô∏è /help"+fmt.Sprintf("%t", isUserStartAuth[update.Message.Chat.ID]))
			}
		}
		msg.ReplyMarkup = –∫eyboard
		bot.Send(msg)
	}
}
